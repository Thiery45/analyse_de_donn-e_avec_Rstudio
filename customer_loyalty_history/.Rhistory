# Afficher les observations
print(hommes_bachelor)
print(femmes_master)
# Calculer le nombre total d'observations
nombre_total <- nrow(customer_loyalty_history)
# Filtrer les hommes avec un niveau "Bachelor"
hommes_bachelor <- customer_loyalty_history[customer_loyalty_history$Education == "Male" & customer_loyalty_history$Salary == "Bachelor", ]
nombre_hommes_bachelor <- nrow(hommes_bachelor)
# Filtrer les femmes avec un niveau "Master"
femmes_master <- customer_loyalty_history[customer_loyalty_history$Education == "Female" & customer_loyalty_history$Salary == "Master", ]
nombre_femmes_master <- nrow(femmes_master)
# Calculer les pourcentages
pourcentage_hommes_bachelor <- (nombre_hommes_bachelor / nombre_total) * 100
pourcentage_femmes_master <- (nombre_femmes_master / nombre_total) * 100
# Afficher les résultats
View(femmes_master)
View(hommes_bachelor)
unique(df_clean$Education)
unique(df_clean$Salary)
unique(df_clean$Education)
unique(df_clean$Salary)
head(df_clean[, c("Gender", "Education", "Salary")])
# Filtrer les hommes avec un niveau "Bachelor"
hommes_bachelor <- df_clean[df_clean$Gender == "Male" & df_clean$Salary == "Bachelor", ]
# Filtrer les femmes avec un niveau "Master"
femmes_master <- df_clean[df_clean$Gender == "Female" & df_clean$Salary == "Master", ]
View(df_clean)
Nombre total d'observations dans l'ensemble de données
# Nombre total d'observations dans l'ensemble de données
total_observations <- nrow(df_clean)
# Nombre d'observations pour les femmes avec un niveau "Master"
nombre_femmes_master <- nrow(femmes_master)
# Pourcentage de femmes avec un niveau "Master"
pourcentage_femmes_master <- (nombre_femmes_master / total_observations) * 100
# Affichage du pourcentage
print(pourcentage_femmes_master)
glimpse(df_clean)
# Filtrer les hommes avec un niveau "Bachelor"
hommes_bachelor <- df_clean[df_clean$Gender == "Male" & df_clean$Salary == "Bachelor", ]
# Nombre d'observations pour les hommes avec un niveau "Bachelor"
nombre_hommes_bachelor <- nrow(hommes_bachelor)
# Pourcentage d'hommes avec un niveau "Bachelor"
pourcentage_hommes_bachelor <- (nombre_hommes_bachelor / total_observations) * 100
# Affichage du pourcentage
print(pourcentage_hommes_bachelor)
# Filtrer les hommes avec un niveau "Bachelor"
hommes_bachelor <- df_clean[df_clean$Gender == "Male" & df_clean$Salary == "Bachelor", ]
# Filtrer les femmes avec un niveau "Master"
femmes_master <- df_clean[df_clean$Gender == "Female" & df_clean$Salary == "Master", ]
View(df_clean)
# Nombre total d'observations dans l'ensemble de données
total_observations <- nrow(df_clean)
# Nombre d'observations pour les hommes avec un niveau "Bachelor"
nombre_hommes_bachelor <- nrow(hommes_bachelor)
# Pourcentage d'hommes avec un niveau "Bachelor"
pourcentage_hommes_bachelor <- (nombre_hommes_bachelor / total_observations) * 100
# Nombre d'observations pour les femmes avec un niveau "Master"
nombre_femmes_master <- nrow(femmes_master)
# Pourcentage de femmes avec un niveau "Master"
pourcentage_femmes_master <- (nombre_femmes_master / total_observations) * 100
View(femmes_master)
View(hommes_bachelor)
rm(femmes_master)
rm(hommes_bachelor)
glimpse(customer_loyalty_history)
library(tidyverse)
glimpse(customer_loyalty_history)
customer_loyalty_history <- data.frame(
Education  = c("Male", "Male", "Female", "Female", "Male", "Female"),
Salary = c("Bachelor", "Bachelor", "Master", "Master", "Bachelor", "Master")
)
# Calculer le pourcentage d'hommes avec un baccalauréat
male_bachelors_percentage <- customer_loyalty_history %>%
filter( Education == "Male", Salary== "Bachelor") %>%
nrow() / customer_loyalty_history %>%
filter(Education == "Male") %>%
nrow() * 100
# Calculer le pourcentage de femmes avec une maîtrise (master)
female_masters_percentage <- customer_loyalty_history%>%
filter(Salary  == "Female", Salary == "Master") %>%
nrow() / customer_loyalty_history %>%
filter(Education  == "Female") %>%
nrow() * 100
# Afficher les résultats
cat("Pourcentage d'hommes avec un baccalauréat:", male_bachelors_percentage, "%\n")
cat("Pourcentage de femmes avec une maîtrise:", female_masters_percentage, "%\n")
customer_loyalty_history <- data.frame(
Education  = c("Male", "Male", "Female", "Female", "Male", "Female"),
Salary = c("Bachelor", "Bachelor", "Master", "Master", "Bachelor", "Master")
)
# Calculer le pourcentage d'hommes avec un Bachelor
male_bachelors_percentage <- customer_loyalty_history %>%
filter( Education == "Male", Salary== "Bachelor") %>%
nrow() / customer_loyalty_history %>%
filter(Education == "Male") %>%
nrow() * 100
# Calculer le pourcentage de femmes avec un Master (master)
female_masters_percentage <- customer_loyalty_history%>%
filter(Education == "Female", Salary == "Master") %>%
nrow() / customer_loyalty_history %>%
filter(Education  == "Female") %>%
nrow() * 100
# Afficher les résultats
cat("Pourcentage d'hommes avec un Bachelor:", male_bachelors_percentage, "%\n")
cat("Pourcentage de femmes avec une Master", female_masters_percentage, "%\n")
glimpse(customer_loyalty_history)
rm(female_masters_percentage)
rm(male_bachelors_percentage)
rm(pourcentage_femmes_master)
rm(pourcentage_hommes_bachelor)
customer_loyalty_history <- data.frame(
Education  = c("Male", "Male", "Female", "Female", "Male", "Female"),
Salary= c("Bachelor", "Bachelor", "Master", "Master", "Bachelor", "Master")
)
# Calculer le pourcentage d'hommes avec un Bachelor
male_bachelors_percentage <- customer_loyalty_history %>%
filter(Education == "Male", Salary   == "Bachelor") %>%
nrow() / customer_loyalty_history %>%
filter( Education== "Male") %>%
nrow() * 100
# Calculer le pourcentage de femmes avec un Master (master)
female_masters_percentage <- customer_loyalty_history %>%
filter(Education == "Female", Salary == "Master") %>%
nrow() / customer_loyalty_history%>%
filter(Education == "Female") %>%
nrow() * 100
# Afficher les résultats
cat("Pourcentage d'hommes avec un Bachelor:", round(male_bachelors_percentage, 2), "%\n")
cat("Pourcentage de femmes avec un Master:", round(female_masters_percentage, 2), "%\n")
glimpse(customer_loyalty_history)
rm(female_masters_percentage)
rm(male_bachelors_percentage)
customer_loyalty_history <- data.frame(
Education  = c("Male", "Male", "Female", "Female", "Male", "Female"),
Salary  = c("Bachelor", "Bachelor", "Master", "Master", "Bachelor", "Master")
)
# Nombre total d'hommes et de femmes
total_bachelors <- sum(customer_loyalty_history$Education == "Bachelor")
total_masters <- sum(customer_loyalty_history$Education == "Master")
# Nombre de femmes avec un baccalauréat
females_with_bachelors <- sum(customer_loyalty_history$Education == "Female" & customer_loyalty_history$Salary == "Bachelor")
# Nombre d'hommes avec une maîtrise
males_with_master <- sum(customer_loyalty_history$Education == "Male" & customer_loyalty_history$Salary== "Master")
# Calculer le pourcentage de femmes avec un baccalauréat
female_bachelors_percentage <- (females_with_bachelors / total_bachelors) * 100
# Calculer le pourcentage d'hommes avec une maîtrise
male_masters_percentage <- (males_with_master / total_masters) * 100
# Afficher les résultats
cat("Pourcentage de femmes avec un Bachelor:", round(female_bachelors_percentage, 2), "%\n")
cat("Pourcentage d'hommes avec un Master:", round(male_masters_percentage, 2), "%\n")
rm(female_bachelors_percentage)
rm(male_masters_percentage)
rm(females_with_bachelors)
rm(total_masters)
rm(total_bachelors)
# Nombre total d'hommes et de femmes
total_bachelors <- sum(customer_loyalty_history$Salary == "Bachelor")
total_masters <- sum(customer_loyalty_history$Salary== "Master")
# Nombre de femmes avec un baccalauréat
females_with_bachelors <- sum(customer_loyalty_history$Education == "Female" & customer_loyalty_history$Salary == "Bachelor")
# Nombre d'hommes avec une maîtrise
males_with_master <- sum(customer_loyalty_history$Education == "Male" & customer_loyalty_history$Education == "Master")
# Calculer le pourcentage de femmes avec un baccalauréat
if (total_bachelors != 0) {
female_bachelors_percentage <- (females_with_bachelors / total_bachelors) * 100
} else {
female_bachelors_percentage <- 0
}
# Calculer le pourcentage d'hommes avec une maîtrise
if (total_masters != 0) {
male_masters_percentage <- (males_with_master / total_masters) * 100
} else {
male_masters_percentage <- 0
}
# Afficher les résultats
cat("Pourcentage de femmes avec un Bachelors:", round(female_bachelors_percentage, 2), "%\n")
cat("Pourcentage d'hommes avec un Master:", round(male_masters_percentage, 2), "%\n")
library(ggplot2)
# Remplacez "nom_de_votre_dataframe" par le nom réel de votre dataframe
# Créer le graphique
ggplot(customer_loyalty_history, aes(x = Education, y = Salary, fill = MaritalStatus)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(title = "Salaire moyen par niveau d'éducation et statut marital",
x = "Niveau d'éducation",
y = "Salaire moyen",
fill = "Statut marital") +
theme_minimal()
# Vérification des noms de colonnes
print(colnames(nom_de_votre_dataframe))
# Vérification des noms de colonnes
print(colnames(customer_loyalty_history))
print(colnames(customer_loyalty_history))
# Créer le graphique
ggplot(customer_loyalty_history, aes(x = Education, y = Salary, fill = MaritalStatus)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(title = "Salaire moyen par niveau d'éducation et statut marital",
x = "Niveau d'éducation",
y = "Salaire moyen",
fill = "Statut marital") +
theme_minimal()
View(customer_loyalty_history)
glimpse(customer_loyalty_history)
rm(clearPushBack())
rm(df_clean)
# Convertir les colonnes Salary et Gender en facteurs
customer_loyalty_history$`Salary"*`<- factor(customer_loyalty_history$`Salary"*`)
customer_loyalty_history$`Education"*` <- factor(customer_loyalty_history$`Education"*`)
# Créer le graphique
ggplot(customer_loyalty_history, aes(x =`Salary"*` , fill = `Marital Status"*`, y = `Salary"*`)) +
stat_summary(fun = "mean", geom = "col") +
labs(title = "Salaire moyen par sexe et statut marital",
x = "Salaire", y = "Moyenne du salaire") +
theme_minimal()
library(ggplot2)
# Convertir les colonnes Salary et Gender en facteurs
customer_loyalty_history$`Salary"*`<- factor(customer_loyalty_history$`Salary"*`)
customer_loyalty_history$`Education"*` <- factor(customer_loyalty_history$`Education"*`)
# Créer le graphique
ggplot(customer_loyalty_history, aes(x =`Salary"*` , fill = `Marital Status"*`, y = `Salary"*`)) +
stat_summary(fun = "mean", geom = "col") +
labs(title = "Salaire moyen par sexe et statut marital",
x = "Salaire", y = "Moyenne du salaire") +
theme_minimal()
# Convertir les colonnes Salary et Gender en facteurs
customer_loyalty_history$Salary <- factor(customer_loyalty_history$Salary)
customer_loyalty_history$Gender <- factor(customer_loyalty_history$Gender)
# Créer le graphique
ggplot(customer_loyalty_history, aes(x = Gender, y = `Salary"*`, fill = `Marital Status"*`)) +
stat_summary(fun = "mean", geom = "bar", position = "dodge") +
labs(title = "Salaire moyen par sexe et statut marital",
x = "Sexe", y = "Salaire moyen") +
theme_minimal()
library(ggplot2)
# Convertir les colonnes Salary et Gender en facteurs
customer_loyalty_history$Salary <- factor(customer_loyalty_history$Salary)
customer_loyalty_history$Gender <- factor(customer_loyalty_history$Gender)
# Créer le graphique
ggplot(customer_loyalty_history, aes(x = Gender, y = `Salary"*`, fill = `Marital Status"*`)) +
stat_summary(fun = "mean", geom = "bar", position = "dodge") +
labs(title = "Salaire moyen par sexe et statut marital",
x = "Sexe", y = "Salaire moyen") +
theme_minimal()
head(customer_loyalty_history)
str(customer_loyalty_history[c("Gender", "Education", "Salary")])
summary(customer_loyalty_history[c("Gender", "Education", "Salary")])
# Filtrer les données pour exclure les identifiants dans la colonne "Gender"
filtered_data <- customer_loyalty_history[!grepl("\\*", customer_loyalty_history$Gender), ]
# Convertir les colonnes Salary et Gender en facteurs
filtered_data$Salary <- factor(filtered_data$Salary)
filtered_data$Gender <- factor(filtered_data$Gender)
# Créer le graphique
ggplot(filtered_data, aes(x = Salary, fill = `Marital Status"*`)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean") +
labs(title = "Salaire moyen par sexe et statut marital",
x = "Salaire", y = "Moyenne du salaire") +
theme_minimal()
# Filtrer les données pour exclure les identifiants dans la colonne "Gender"
filtered_data <- customer_loyalty_history[!grepl("\\*", customer_loyalty_history$Gender), ]
# Convertir les colonnes Salary et Gender en facteurs
filtered_data$Salary <- factor(filtered_data$Salary)
filtered_data$Gender <- factor(filtered_data$Gender)
# Créer le graphique
ggplot(filtered_data, aes(x = Salary, y = ..y.., fill = `Marital Status"*`)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean") +
labs(title = "Salaire moyen par sexe et statut marital",
x = "Salaire", y = "Moyenne du salaire") +
theme_minimal()
library(ggplot2)
# Filtrer les données pour exclure les identifiants dans la colonne "Gender"
filtered_data <- customer_loyalty_history[!grepl("\\*", customer_loyalty_history$Gender), ]
# Convertir les colonnes Salary et Gender en facteurs
filtered_data$Salary <- factor(filtered_data$Salary)
filtered_data$Gender <- factor(filtered_data$Gender)
# Créer le graphique
ggplot(filtered_data, aes(x = Salary, y = after_stat(y), fill = `Marital Status"*`)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean") +
labs(title = "Salaire moyen par sexe et statut marital",
x = "Salaire", y = "Moyenne du salaire") +
theme_minimal()
glimpse(customer_loyalty_history)
library(tidyverse)
# Filtrer les données pour exclure les identifiants dans la colonne "Gender"
filtered_data <- customer_loyalty_history[!grepl("\\*", customer_loyalty_history$Gender), ]
# Convertir les colonnes Salary et Gender en facteurs
filtered_data$Salary <- factor(filtered_data$Salary)
filtered_data$Gender <- factor(filtered_data$Gender)
# Créer le graphique
ggplot(filtered_data, aes(x = Salary, y = after_stat(y), fill = `Marital Status"*`)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean") +
labs(title = "Salaire moyen par sexe et statut marital",
x = "Salaire", y = "Moyenne du salaire") +
theme_minimal()
glimpse( customer_loyalty_history)
# Convertir les colonnes Salary et Gender en facteurs
customer_loyalty_history$Salary <- factor(customer_loyalty_history$Salary)
customer_loyalty_history$Gender <- factor(customer_loyalty_history$Gender)
# Créer le graphique
ggplot(customer_loyalty_history, aes(x = Gender, fill = `Marital Status"*`)) +
geom_bar(position = "dodge", stat = "summary", fun = "mean") +
labs(title = "Salaire moyen par sexe et statut marital",
x = "Sexe", y = "Moyenne du salaire") +
theme_minimal()
customer_loyalty_history <- read_delim("input/customer_loyalty_history.txt",
delim = "!", escape_double = FALSE, trim_ws = TRUE)
# code de verification de la table ###
View(customer_loyalty_history)
View(customer_loyalty_history)
glimpse(customer_loyalty_history)
rm(nombre_femmes_master)
rm(nombre_hommes_bachelor)
rm(nombre_provinces)
rm(nombre_total)
rm(nombre_villes)
rm(pourcentage_femmes_master)
rm(hommes_bachelor)
rm(total_observations)
rm(pourcentage_hommes_bachelor)
rm(filtered_data)
rm(femmes_master)
rm(df_clean)
# Renommer les colonnes en supprimant les caractères indésirables
customer_loyalty_history <- rename(customer_loyalty_history,
Loyalty_Number = `Loyalty Number"*`,
Country = `Country"*`,
# Autres colonnes à renommer...
)
View(customer_loyalty_history)
# Convertir les variables au bon type de données
customer_loyalty_history$Country <- as.factor(customer_loyalty_history$Country)
# Autres conversions...
# Supprimer les lignes avec des valeurs manquantes
customer_loyalty_history <- na.omit(customer_loyalty_history)
# Filtrer les données en fonction de certaines conditions
customer_loyalty_history <- filter(customer_loyalty_history, !is.na(Country))
View(customer_loyalty_history)
# Vérifier les doublons
duplicated_rows <- duplicated(customer_loyalty_history)
duplicated_data <- customer_loyalty_history[duplicated_rows, ]
# Supprimer les doublons
clean_customer_loyalty_history <- unique(customer_loyalty_history)
View(clean_customer_loyalty_history)
View(duplicated_data)
View(customer_loyalty_history)
View(clean_customer_loyalty_history)
# Afficher les données originales et les données nettoyées dans la visionneuse RStudio
View(customer_loyalty_history)
View(clean_customer_loyalty_history)
# Afficher les données originales et les données nettoyées dans la visionneuse RStudio
View(clean_customer_loyalty_history)
glimpse(clean_customer_loyalty_history)
library(dplyr)
clean_customer_loyalty_history <- clean_customer_loyalty_history %>%
mutate(Province = gsub("\\\"", "", `Province"*`),
City = gsub("\\\"", "", `City"*`),
`Postal Code` = gsub("\\\"", "", `Postal Code"*`),
Gender = gsub("\\\"", "", `Gender"*`),
Education = gsub("\\\"", "", `Education"*`),
Salary = gsub("\\\"", "", `Salary"*`),
`Marital Status` = gsub("\\\"", "", `Marital Status"*`),
`Loyalty Card` = gsub("\\\"", "", `Loyalty Card"*`),
CLV = gsub("\\\"", "", `CLV"*`),
`Enrollment Type` = gsub("\\\"", "", `Enrollment Type"*`),
`Enrollment Year` = gsub("\\\"", "", `Enrollment Year"*`),
`Enrollment Month` = gsub("\\\"", "", `Enrollment Month"*`),
`Cancellation Year` = gsub("\\\"", "", `Cancellation Year"*`),
`Cancellation Month` = gsub("\\\"", "", `Cancellation Month`))
View(clean_customer_loyalty_history)
View(customer_loyalty_history)
View(clean_customer_loyalty_history)
glimpse(clean_customer_loyalty_history)
library(stringr)
clean_customer_loyalty_history <- clean_customer_loyalty_history %>%
mutate(Province = str_replace_all(`Province"*`, "[^\"]", ""),
City = str_replace_all(`City"*`, "[^\"]", ""),
`Postal Code` = str_replace_all(`Postal Code"*`, "[^\"]", ""),
Gender = str_replace_all(`Gender"*`, "[^\"]", ""),
Education = str_replace_all(`Education"*`, "[^\"]", ""),
Salary = str_replace_all(`Salary"*`, "[^\"]", ""),
`Marital Status` = str_replace_all(`Marital Status"*`, "[^\"]", ""),
`Loyalty Card` = str_replace_all(`Loyalty Card"*`, "[^\"]", ""),
CLV = str_replace_all(`CLV"*`, "[^\"]", ""),
`Enrollment Type` = str_replace_all(`Enrollment Type"*`, "[^\"]", ""),
`Enrollment Year` = str_replace_all(`Enrollment Year"*`, "[^\"]", ""),
`Enrollment Month` = str_replace_all(`Enrollment Month"*`, "[^\"]", ""),
`Cancellation Year` = str_replace_all(`Cancellation Year"*`, "[^\"]", ""),
`Cancellation Month` = str_replace_all(`Cancellation Month`, "[^\"]", ""))
View(clean_customer_loyalty_history)
View(customer_loyalty_history)
glimpse(clean_customer_loyalty_history)
clean_customer_loyalty_history <- clean_customer_loyalty_history %>%
mutate(Province = gsub("[^a-zA-Z0-9]", "", `Province"*`),
City = gsub("[^a-zA-Z0-9]", "", `City"*`),
`Postal Code` = gsub("[^a-zA-Z0-9]", "", `Postal Code"*`),
Gender = gsub("[^a-zA-Z0-9]", "", `Gender"*`),
Education = gsub("[^a-zA-Z0-9]", "", `Education"*`),
Salary = gsub("[^a-zA-Z0-9]", "", `Salary"*`),
`Marital Status` = gsub("[^a-zA-Z0-9]", "", `Marital Status"*`),
`Loyalty Card` = gsub("[^a-zA-Z0-9]", "", `Loyalty Card"*`),
CLV = gsub("[^a-zA-Z0-9]", "", `CLV"*`),
`Enrollment Type` = gsub("[^a-zA-Z0-9]", "", `Enrollment Type"*`),
`Enrollment Year` = gsub("[^a-zA-Z0-9]", "", `Enrollment Year"*`),
`Enrollment Month` = gsub("[^a-zA-Z0-9]", "", `Enrollment Month"*`),
`Cancellation Year` = gsub("[^a-zA-Z0-9]", "", `Cancellation Year"*`),
`Cancellation Month` = gsub("[^a-zA-Z0-9]", "", `Cancellation Month`))
View(clean_customer_loyalty_history)
glimpse(clean_customer_loyalty_history)
str(clean_customer_loyalty_history)
# Nombre de clients uniques dans la table nettoyée
nb_clients_uniques <- length(unique(clean_customer_loyalty_history$Loyalty_Number))
# Comparaison avec le nombre total de clients dans la première table
nb_clients_total <- nrow(customer_loyalty_history)
# Vérification
if (nb_clients_uniques == nb_clients_total) {
print("Le nombre de clients uniques correspond au nombre obtenu dans la première table.")
} else {
print("Le nombre de clients uniques ne correspond pas au nombre obtenu dans la première table.")
}
# Nombre de villes uniques
nb_villes <- length(unique(clean_customer_loyalty_history$City))
# Nombre de provinces uniques
nb_provinces <- length(unique(clean_customer_loyalty_history$Province))
# Affichage des résultats
cat("Nombre de villes concernées :", nb_villes, "\n")
cat("Nombre de provinces dans lesquelles elles sont réparties :", nb_provinces, "\n")
# Filtrer les données pour les hommes avec un niveau Bachelor
hommes_bachelor <- clean_customer_loyalty_history %>%
filter(Gender == "Male" & Education == "Bachelor")
# Filtrer les données pour les femmes avec un niveau Master
femmes_master <- clean_customer_loyalty_history %>%
filter(Gender == "Female" & Education == "Master")
# Calculer le pourcentage des hommes avec un niveau Bachelor
pourcentage_hommes_bachelor <- nrow(hommes_bachelor) / sum(clean_customer_loyalty_history$Gender == "Male") * 100
# Calculer le pourcentage des femmes avec un niveau Master
pourcentage_femmes_master <- nrow(femmes_master) / sum(clean_customer_loyalty_history$Gender == "Female") * 100
# Affichage des résultats
cat("Pourcentage des hommes avec un niveau Bachelor :", round(pourcentage_hommes_bachelor, 2), "%\n")
cat("Pourcentage des femmes avec un niveau Master :", round(pourcentage_femmes_master, 2), "%\n")
# Filtrer les données pour les hommes avec un niveau Bachelor
hommes_bachelor <- clean_customer_loyalty_history %>%
filter(Gender == "Male" & Education == "Bachelor")
# Filtrer les données pour les femmes avec un niveau Master
femmes_master <- clean_customer_loyalty_history %>%
filter(Gender == "Female" & Education == "Master")
# Calculer le nombre total d'hommes avec un niveau Bachelor
nb_hommes_bachelor <- nrow(hommes_bachelor)
# Calculer le nombre total de femmes avec un niveau Master
nb_femmes_master <- nrow(femmes_master)
# Calculer le nombre total de clients
nb_total_clients <- nrow(clean_customer_loyalty_history)
# Calculer le pourcentage d'hommes avec un niveau Bachelor
pourcentage_hommes_bachelor <- (nb_hommes_bachelor / nb_total_clients) * 100
# Calculer le pourcentage de femmes avec un niveau Master
pourcentage_femmes_master <- (nb_femmes_master / nb_total_clients) * 100
# Afficher les résultats
cat("Pourcentage d'hommes avec un niveau Bachelor:", pourcentage_hommes_bachelor, "%\n")
cat("Pourcentage de femmes avec un niveau Master:", pourcentage_femmes_master, "%\n")
library(ggplot2)
# Convertir les colonnes Salary et Gender en facteurs
clean_customer_loyalty_history$Salary <- factor(clean_customer_loyalty_history$Salary)
clean_customer_loyalty_history$Gender <- factor(clean_customer_loyalty_history$Gender)
# Créer le graphique
ggplot(clean_customer_loyalty_history, aes(x = Gender, y = as.numeric(Salary), fill = `Marital Status`)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge") +
labs(title = "Salaire moyen par sexe et statut marital",
x = "Sexe", y = "Salaire moyen", fill = "Statut marital") +
theme_minimal()
# Convertir les colonnes Salary et Gender en facteurs
clean_customer_loyalty_history$Salary <- factor(clean_customer_loyalty_history$Salary)
clean_customer_loyalty_history$Gender <- factor(clean_customer_loyalty_history$Gender)
# Créer le graphique
ggplot(clean_customer_loyalty_history, aes(x = Gender, y = as.numeric(Salary), fill = `Marital Status`)) +
stat_summary(fun = "mean", geom = "bar", position = "dodge") +
labs(title = "Salaire moyen par sexe et statut marital",
x = "Sexe", y = "Salaire moyen", fill = "Statut marital") +
theme_minimal()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
# Convertir les colonnes Salary et Gender en facteurs
clean_customer_loyalty_history$Salary <- factor(clean_customer_loyalty_history$Salary)
clean_customer_loyalty_history$Gender <- factor(clean_customer_loyalty_history$Gender)
# Créer le graphique
ggplot(clean_customer_loyalty_history, aes(x = Gender, y = as.numeric(Salary), fill = `Marital Status`)) +
stat_summary(fun = "mean", geom = "bar", position = "dodge") +
labs(title = "Salaire moyen par sexe et statut marital",
x = "Sexe", y = "Salaire moyen", fill = "Statut marital") +
theme_minimal()
library(tidyverse)
glimpse(clean_custom_loyalty_history)
glimpse(clean_customer_loyalty_history)
library(dplyr)
# Identifier les colonnes contenant des caractères spéciaux
special_chars <- grep("[^[:alnum:]_]", names(clean_customer_loyalty_history), value = TRUE)
# Supprimer les colonnes contenant des caractères spéciaux
clean_customer_loyalty_history <- clean_customer_loyalty_history %>%
select(-any_of(special_chars))
View(clean_customer_loyalty_history)
library(tidyverse)
# Sélectionner les colonnes qui ne contiennent pas le symbole "*"
clean_customer_loyalty_history <- clean_customer_loyalty_history %>%
select(-contains("*"))
# Afficher les noms de colonnes après suppression
names(clean_customer_loyalty_history)
glimpse(clean_customer_loyalty_history)
clean_customer_loyalty_history1 <- clean_customer_loyalty_history %>%
mutate(`Marital Status`= as.numeric(`Marital Status` ))
View(clean_customer_loyalty_history)
# Remplacer les valeurs NA par TRUE
clean_customer_loyalty_history <- replace(clean_customer_loyalty_history, is.na(clean_customer_loyalty_history), TRUE)
View(clean_customer_loyalty_history1)
